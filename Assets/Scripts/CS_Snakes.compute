// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#pragma kernel CSBorder

struct SnakeData
{
    float2 prevPos, newPos;
    float thickness;
    float4 color;
    int collision; // bool
};

struct LineData
{
    float2 posA, posB;
    float thickness;
    float4 color;
    int clipCircle; // 0 = no clip; 1 = circle around a; 2 = circle around b; 3 = circle around both
};

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Arena;

RWStructuredBuffer<SnakeData> _Snakes;
StructuredBuffer<LineData> _Lines;
int _Width, _Height;
int _SnakeCount;
int _LineCount;

float SqrDistToLine( float2 p, float2 a, float2 b )
{
    float2 pa = p-a, ba = b-a;
    float h = saturate( dot(pa,ba)/dot(ba,ba) );
    float2 d = pa - ba * h;
    return dot(d,d);
}

float sdSegment( float2 p, float2 a, float2 b )
{
    float2 pa = p-a, ba = b-a;
    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );
    return length( pa - ba*h );
}

float sdArc( float2 p, float2 sc, float ra, float rb )
{
    // sc is the sin/cos of the arc's aperture
    p.x = abs(p.x);
    return ((sc.y*p.x>sc.x*p.y) ? length(p-sc*ra) : abs(length(p)-ra)) - rb;
}

[numthreads(8,8,1)]
void CSMain (uint2 id : SV_DispatchThreadID)
{
    // current pixel in uv space
    float2 uv = float2((float) id.x / _Width, (float) id.y / _Height);

    // SNAKES
    for (int i = 0; i < _SnakeCount; i++)
    {
        float distToSegment = sdSegment(uv, _Snakes[i].prevPos, _Snakes[i].newPos);

        // to avoid self-collision
        float distToStart = length(_Snakes[i].prevPos - uv);

        // if this pixel is part of the current segment
        if (distToSegment <= _Snakes[i].thickness / 2)
        {
            // if the pixel is not the end of same snake from previous frame && the pixel has a value already
            if (distToStart > _Snakes[i].thickness / 2 && Arena[id].a > 0)
            {
                // COLLISION
                _Snakes[i].collision = 1;
            }

            // fill pixel
            Arena[id] = _Snakes[i].color;
        }
    }

    // LINES
    for (i = 0; i < _LineCount; i++)
    {
        float distToSegment = sdSegment(uv, _Lines[i].posA, _Lines[i].posB);

        // if this pixel is part of the current segment
        if (distToSegment <= _Lines[i].thickness / 2)
        {
            // clip circle
            if ((_Lines[i].clipCircle == 1 || _Lines[i].clipCircle == 3) && length(_Snakes[i].prevPos - uv) <= _Lines[i].thickness / 2)
            {
                continue;
            }
            else if ((_Lines[i].clipCircle == 2 || _Lines[i].clipCircle == 3) && length(_Snakes[i].newPos - uv) <= _Lines[i].thickness / 2)
            {
                continue;
            }
            
            // fill pixel but not arena border
            if (any((1, 1, 1, 1) - Arena[id]))
            {
                Arena[id] = _Lines[i].color;
            }
        }
    }
}

[numthreads(8,8,1)]
void CSBorder (uint2 id : SV_DispatchThreadID)
{
    float2 uv = float2 ((float)id.x/_Width , (float)id.y/_Height);
    float normBorderX = 2.0/_Width;
    float normBorderY = 2.0/_Height;

    if(uv.x <= normBorderX || uv.x >= 1-normBorderX || uv.y <= normBorderY || uv.y >= 1-normBorderY)
    {
        Arena[id] = float4(1, 1, 1, 1);
    }
    else
    {
        Arena[id] = float4(0, 0, 0, 0);
    }
}